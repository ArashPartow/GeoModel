# Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration

# Set up the project.
cmake_minimum_required( VERSION 3.1 )
project( "GeoModelIO" VERSION 3.2.0 LANGUAGES CXX )

# ---------------------------

# Make the module directory visible to CMake.
list( APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake )

# Set build and C++ default options
include ( configure_cpp_options )

# Set optional definitions to steer the source code
include( configure_definitions)

# Use the GNU install directory names.
include( GNUInstallDirs )

# Print Build Info on screen
include( PrintBuildInfo )

# ---------------------------

# Project's dependencies.
find_package( GeoModelCore 3.2.0 REQUIRED )
find_package( Qt5 COMPONENTS Core Sql REQUIRED )

# Set sub-packages to build.
add_subdirectory( GeoModelErrorHandler )
add_subdirectory( GeoModelDBManager )
add_subdirectory( TFPersistification )
add_subdirectory( GeoModelRead )
add_subdirectory( GeoModelWrite )
#

# Create and install the version description of the project.
include( CMakePackageConfigHelpers )
write_basic_config_version_file(
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}ConfigVersion.cmake
   VERSION ${PROJECT_VERSION}
   COMPATIBILITY SameMajorVersion )
install(
   FILES
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}ConfigVersion.cmake
   COMPONENT Development
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME} )

# Create and install the description of the libraries.
install( EXPORT ${PROJECT_NAME}-export
   FILE ${PROJECT_NAME}Targets.cmake
   COMPONENT Development
   NAMESPACE "${PROJECT_NAME}::"
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME} )

# Install the hand-written project configuration.
configure_file( ${CMAKE_SOURCE_DIR}/cmake/GeoModelIOConfig.cmake.in
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake
   @ONLY )
install(
   FILES
   ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake
   COMPONENT Development
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME} )


# Export targets from the *build* tree for use by outside projects.
#
# INFO:
# Thus, this project can be used by other projects without being installed.
# This is useful for development: you can build a child projet without an
# install path.
# For example:
# while generating GeoModel projects with CMake as Xcode project on macOS,
# after having built GeoModelCore, you can use that to build GeoModelIO without
# the need of an installation step, by simply prepend 'GeoModelCore_DIR' as this:
#     $ GeoModelCore_DIR=../b_core/CMakeFiles cmake -G Xcode ../../GeoModelIO
# which is useful when generating projects
# that needs to be built with Xcode. Xcode in fact does not handle well the install
# folder generated by CMake: sometimes the content of that is not updated when
# updating the code, which results in keeping running the same old code even if
# we modified our source code.
export(EXPORT ${PROJECT_NAME}-export NAMESPACE "${PROJECT_NAME}::" FILE ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake)
export(TARGETS GeoModelErrorHandler GeoModelDBManager TFPersistification GeoModelRead GeoModelWrite NAMESPACE "${PROJECT_NAME}::" FILE ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Targets.cmake)



# Set up the packaging of the project using CPack.
include( GeoModelIOPackaging )
