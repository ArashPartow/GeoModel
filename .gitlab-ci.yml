# List of the CI build stages.
stages:
  - step-A
  - step-B
  - step-C

# List global variables
variables:
  # CMAKE_DEPS_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../dependencies-install -DCMAKE_PREFIX_PATH=${PWD}/../dependencies-install
  CMAKE_DEPS_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install
  # CMAKE_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_PREFIX_PATH=${PWD}/../dependencies-install
  CMAKE_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install
  GIT_SUBMODULE_STRATEGY: recursive


# TEMPLATES FOR BUILDING ON DIFFERENT PLATFORMS
.macos-template-job: &macos-job
  tags:
    - macos
  allow_failure: true
  timeout: 30 minutes
  before_script:
    - brew install nlohmann-json xerces-c
    - export PATH="/usr/local/opt/qt/bin:$PATH" # to make Qt5 discoverable by CMake
  after_script:
    - brew remove nlohmann-json xerces-c


.ubuntu-template-job-base: &ubuntu-job-base
  image: ubuntu:18.04
  tags:
    - docker

# NOTE
# The Ubuntu package 'nlohmann-json-dev' is version 2.x, too old for us.
# Thus, for GeoModelVisualization (GMEX), we now build nlohmann_json as part
# of the build, by using the 'standalone' job only
.ubuntu-template-job-default: &ubuntu-job
  <<: *ubuntu-job-base
  before_script:
    - apt-get update -qq && apt-get install -y -qq git cmake wget unzip build-essential freeglut3-dev libboost-all-dev qt5-default mercurial libeigen3-dev libsqlite3-dev


# .ubuntu-template-job-registry: &ubuntu-job-registry
#   image: gitlab-registry.cern.ch/mbandier/geant4-ubuntu/base-image:1.1
#   tags:
#     - docker
#   before_script:
#     - apt-get update -qq && apt-get install -y -qq libeigen3-dev libsqlite3-dev


# TEMPLATES FOR BUILDING PACKAGES

.coin-build-template: &coin-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_DEPS_BASE_ARGS}
  script:
    - pwd; ls
    - wget https://bitbucket.org/Coin3D/coin/downloads/coin-4.0.0-src.zip
    - unzip coin-4.0.0-src.zip -d coin-sources
    - mv coin-sources/* coin
    - mkdir build_coin
    - cd build_coin
    - cmake ${CMAKE_ARGS} ../coin
    - make -j2
    - make install
  artifacts:
    paths:
      - install

.soqt-build-template: &soqt-job
  stage: step-B
  variables:
    CMAKE_ARGS: ${CMAKE_DEPS_BASE_ARGS}
  script:
    - pwd; ls
    # - wget https://bitbucket.org/rmbianchi/soqt/downloads/soqt-1b4fe9d-macos-mojave-fix.zip
    # - unzip soqt-1b4fe9d-macos-mojave-fix.zip
    # - wget https://bitbucket.org/rmbianchi/soqt/get/CI-fix-25692a8.zip
    # - unzip CI-fix-25692a8.zip
    # - mv rmbianchi-soqt-25692a805a2c soqt
    - hg clone https://rmbianchi@bitbucket.org/rmbianchi/soqt
    - mkdir build_soqt
    - cd build_soqt
    - echo "CMAKE_ARGS - ${CMAKE_ARGS}"
    - echo "CMAKE_EXTRA_FLAGS - ${CMAKE_EXTRA_FLAGS}"
    - cmake ${CMAKE_ARGS} ../soqt
    - make -j2
    - make install
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
  artifacts:
    paths:
      - install


.xercesc-build-template-job: &xercesc-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - pwd; ls
    - wget https://archive.apache.org/dist/xerces/c/3/sources/xerces-c-3.2.2.tar.gz
    - tar -xf xerces-c-3.2.2.tar.gz
    - mkdir xerces-c-build
    - cd xerces-c-build
    - cmake ${CMAKE_ARGS} ../xerces-c-3.2.2
    - make -j4
    - make install
  artifacts:
    paths:
      - install


.geant4-build-template-job: &geant4-job
  stage: step-B
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - pwd; ls
    - git clone https://gitlab.cern.ch/geant4/geant4.git
    - cd geant4
    - git checkout tags/v10.6.0
    - cd ../
    - mkdir Geant4-build
    - cd Geant4-build
    - cmake ${CMAKE_ARGS} -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_GDML=ON -DGEANT4_BUILD_MULTITHREADED=ON -DXERCESC_ROOT_DIR=../install/xerces-c/ ../geant4 -DGEANT4_USE_SYSTEM_EXPAT=OFF
    - make -j4
    - make install
  artifacts:
    paths:
      - install




.geomodel-build-template: &geomodel-job
  script:
    - echo "PWD; LS" # CI debug only
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
    - cmake --version # CI debug only
    - mkdir build
    - cd build
    - echo "CMAKE_ARGS - ${CMAKE_ARGS}"
    - echo "CMAKE_EXTRA_FLAGS - ${CMAKE_EXTRA_FLAGS}"
    - cmake ${CMAKE_ARGS} ${CMAKE_CONFIG_FLAGS} ${CMAKE_EXTRA_FLAGS} ..
    # - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_PREFIX_PATH=../dependencies-install -DGEOMODEL_BUILD_VISUALIZATION=TRUE -DGEOMODEL_USE_BUILTIN_JSON=TRUE -DGEOMODEL_USE_BUILTIN_XERCESC=TRUE ..
    - cmake --build . -- -j2 # using too many threads will cause weird compilation errors on the Ubuntu docker images...
    - cmake --build . -- install
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
  artifacts:
    paths:
      - install



# ACTUAL BUILD JOBS

### MACOS BUILD JOBS
mac-coin:
  <<: *macos-job
  <<: *coin-job
  stage: step-A

mac-soqt:
  <<: *macos-job
  <<: *soqt-job
  needs: ["mac-coin"]
  stage: step-B

mac-geomodel-base:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A

mac-geomodel-visualization:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-C
  needs: ["mac-coin", "mac-soqt"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_BUILD_VISUALIZATION=TRUE



### UBUNTU BUILD JOBS
ubu-coin:
  <<: *ubuntu-job
  <<: *coin-job

ubu-soqt:
  <<: *ubuntu-job
  <<: *soqt-job
  needs: ["ubu-coin"]

ubu-gm-base-builtin:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE -DGEOMODEL_USE_BUILTIN_XERCESC=TRUE


ubu-gm-visualization-builtin:
  <<: *ubuntu-job
  <<: *geomodel-job
  needs: ["ubu-coin", "ubu-soqt"]
  stage: step-C
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_VISUALIZATION=TRUE
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE -DGEOMODEL_USE_BUILTIN_XERCESC=TRUE

ubu-gm-examples-builtin:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES=TRUE
    CMAKE_EXTRA_FLAGS:  -DGEOMODEL_USE_BUILTIN_JSON=TRUE -DGEOMODEL_USE_BUILTIN_XERCESC=TRUE


ubu-XercesC:
  <<: *ubuntu-job
  <<: *xercesc-job

ubu-geant4:
  <<: *ubuntu-job
  <<: *geant4-job
  needs: ["ubu-XercesC"]


ubu-gm-examples-gmg4-builtinjson:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-C
  needs: ["ubu-geant4", "ubu-XercesC"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES_W_GEANT4=TRUE
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE

ubu-gm-gmg4-builtinjson:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-C
  needs: ["ubu-geant4", "ubu-XercesC"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_GEOMODELG4=TRUE
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE

ubu-gm-fullsimlight-builtinjson:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-C
  needs: ["ubu-geant4", "ubu-XercesC"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_FULLSIMLIGHT=TRUE
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE
